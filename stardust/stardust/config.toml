[variables]  
# Section for user-defined variables
# you can use these anywhere inside strings in this 
# config file by wrapping the name of the variable
# in curly braces, i.e. if you have a 
#     var = "hello"
# variable, you can set the project ROM name to 
# "hello.smc" by doing
#     project_rom = "{var}.smc" 
# later on 

project_name = "my_hack"

project_root = "../"

[settings]

# Name of this configuration,
# can be anything you like really
config_name = "main"

# Root directory of the project
project_root = "{project_root}"

# What conflicts stardust should check for 
# between tools/resources during rebuilds, 
# can be set to "none" to disable it, "hijacks" 
# to only check for conflicts in the vanilla 
# ROM area or "all" to check everywhere
check_conflicts = "none"

# Optional log file for conflicts, if 
# set, stardust will log conflicts to this 
# file instead of the console after rebuilds
# conflict_log_file = "conflicts.txt"

# Uncomment to use integrated text map16 format
# instead of binary format
# use_text_map16_format = true

# ROM size to expand to after applying initial patch
rom_size = "4MB"

[output]

# Path for the output ROM
# I'm using a variable here with the {} syntax, 
# this will expand to
#      project_rom = "my_hack.smc"
project_rom = "{project_name}.smc"

# Path for temporary ROM used during builds
temporary_rom = "temp.smc"

# Path for BPS package output by the Package function
bps_package = "package.bps"

[tools]

[tools.FLIPS]
# Path to FLIPS executable
executable = "tools/flips/flips.exe"

[tools.LunarMagic]
# Path to Lunar Magic executable
executable = "tools/lunar_magic/lunar_magic.exe"

# You can use [tools.generic.my_tool] to specify any tool you want, 
# not just the ones included here
# You can then use it in the build order using the name you gave it, 
# i.e. "my_tool"
[tools.generic.PIXI]

# Working directory of the tool, all other paths in this tool's section
# are relative to this path
directory = "tools/pixi"

# Executable file of the tool
executable = "pixi.exe"

# Options to pass to the tool, by default, the path to the temporary
# ROM is passed to the tool right after these
options = "-l tools/pixi/list.txt"

# Uncomment to not pass path to temporary ROM to the tool
# pass_rom = false

# static_dependencies and dependency_report_file are only
# used for Quickbuild

# Files/folders the tool relies on/inserts in any case
# Path is the path to the file/folder, policy lets you 
# specify what to do if the file/folder changes, valid
# policies are "rebuild" or "reinsert", "reinsert" is 
# the default and will only reinsert this tool if a 
# change is detected, while "rebuild" will cause a 
# full rebuild instead
#
# For folders, any change to a file in the folder as well 
# as addition or deletion of files to/from the folder will 
# trigger the corresponding policy
#
# For files, just saving them will cause the policy 
# to trigger
static_dependencies = [
	{ path = "pixi.exe", policy = "rebuild" },

	# Omitting policy is the same as specifying policy = "reinsert"
    { path = "list.txt" }, 

    { path = "asar.dll", policy = "rebuild"}, 
    { path = "NewtonSoft.Json.dll", policy = "rebuild"} ,

	# policy = "reinsert" is not needed here, since it's 
	# the default, but it can still be specified for explicitness
    { path = "routines", policy = "reinsert"},

	# Need to add the "sprites" folder here, because the 
	# dependency report for PIXI won't include .json/.cfg files
    { path = "sprites", policy = "reinsert" }
]

# Path to the dependency report file generated by the 
# customized asar.dll when PIXI is inserted
#
# This will cover all data/code the tool inserts via 
# asar, which means we don't have to specify each 
# and every single .asm file in the static_dependencies
dependency_report_file = ".dependencies"


[tools.generic.GPS]
directory = "tools/gps"
executable = "gps.exe"

static_dependencies = [ 
	{ path = "gps.exe", policy = "rebuild" },
	{ path = "asar.dll", policy = "rebuild"}, 
	{ path = "list.txt" }, 
	{ path = "routines" } 
]
dependency_report_file = ".dependencies"


[tools.generic.UberASM]
directory = "tools/uberasm"
executable = "UberASMTool.exe"
options = "list.txt"

static_dependencies = [
	{ path = "UberASMTool.exe" },
	{ path = "list.txt"}, 
	{ path = "asar.dll", policy = "rebuild" }, 
	{ path = "library" }, 
	{ path = "routines" },

# Maybe try uncommenting this if you're using UberASM < 2.0
# and wanna try Quickbuild
    # { path = "asm/base" },
    # { path = "gamemode" },
    # { path = "level" },
    # { path = "other" },
    # { path = "overworld" },
]
dependency_report_file = ".dependencies"


[tools.generic.AddMusicK]
directory = "tools/addmusic"
executable = "AddMusicK.exe"

# AMK doesn't use asar for much, so we need a 
# lot of static dependencies here, sadly
static_dependencies = [ 
    { path = "AddMusicK.exe", policy = "rebuild" },
    { path = "asar.exe", policy = "rebuild" },

    { path = "AddMusic_list.txt" },
    { path = "AddMusic_sample groups.txt" },
    { path = "AddMusic_sound effects.txt" },

    { path = "1DF9" },
    { path = "1DFC" }, 

	{ path = "samples" },
	{ path = "music" }
]
dependency_report_file = ".dependencies"


[resources]
# Pretty self-explanatory if you've used Lunar Helper
#
# Note that "global_data" has been split into
# overworld, titlescreen, credits and global_exanimation
initial_patch = "resources/initial_patch.bps"
levels = "levels"
shared_palettes = "resources/shared_palettes.pal"
map16 = "resources/all.map16"
overworld = "resources/overworld.bps"
titlescreen = "resources/titlescreen.bps"
credits = "resources/credits.bps"
global_exanimation = "resources/global_exanimation.bps"

# Two new variables that can be used to keep your graphics
# folders in places other than next to the built ROM
# Symlinks are created between these folders and the 
# folders Lunar Magic expects next to the ROM, so 
# importing/exporting graphics manually in Lunar Magic
# should still work fine
graphics = "resources/graphics"
ex_graphics = "resources/ex_graphics"

patches = [
	# "patches/some_patch.asm",
	# "patches/etc.asm"
]

[orders]
build_order = [
    "Graphics",                 # Insert GFX
    "ExGraphics",               # Insert ExGFX
    "Map16",                    # Insert Map16

	"TitleScreenMovement",      # Uncomment this if you're inserting title moves

    "SharedPalettes",           # Insert Shared Palettes 
    "Overworld",                # Insert Overworld
    "TitleScreen",              # Insert Titlescren
    "Credits",                  # Insert Credits
    "GlobalExAnimation",        # Insert Global ExAnimation

    "Patches",                  # Insert all remaining patches from the patches list that 
                                # are not explicitly mentioned in this build order


    "PIXI",                     # Insert custom sprites
    "Levels",                   # Insert all levels

    "PIXI",                     # Uncomment this if you're using Lunar Magic 3.31 or higher

    "GPS",                      # Insert custom blocks
    "AddMusicK",                # Insert custom music
    "UberASM",                  # Insert UberASM code

  	# "patches/some_patch.asm",   # Example of inserting a specific patch at a specific point
]
